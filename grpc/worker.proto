/**
 * Copyright (c) Contributors as noted in the AUTHORS file.
 *
 * This Source Code Form is part of *fuurin* library.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

syntax = "proto3";

import "google/protobuf/empty.proto";


message SeqNum {
    uint64 value = 1;
}


message Uuid {
    bytes data = 1;
}


message Endpoints {
    repeated Endpoint endpoint = 1;
}


message Endpoint {
    string delivery = 1;
    string dispatch = 2;
    string snapshot = 3;
}


message Subscriptions {
    bool wildcard = 1;
    repeated bytes names = 2;
}


message Topic {
    bytes name = 1;
    bytes data = 2;
}


message TopicEvent {
    enum Type {
        State = 0;
        Event = 1;
    }

    Type type = 1;
    uint64 seqn = 2;
    Uuid broker = 3;
    Uuid worker = 4;
    Topic topic = 5;
}


message Config {
    Subscriptions subscriptions = 3;
}


message ConfigEvent {
    Uuid uuid = 1;
    SeqNum seqNum = 2;
    Endpoints endpoints = 3;
    Config config = 4;
}


message Event {
    enum Type {
        Invalid = 0;
        Started = 1;
        Stopped = 2;
        Offline = 3;
        Online = 4;
        Delivery = 5;
        SyncRequest = 6;
        SyncBegin = 7;
        SyncElement = 8;
        SyncSuccess = 9;
        SyncError = 10;
        SyncDownloadOn = 11;
        SyncDownloadOff = 12;
    }

    Type type = 1;

    oneof payload {
        TopicEvent topicEvent = 2;
        ConfigEvent configEvent = 3;
    }
}

message EventTimeout {
    int32 millis = 1;
}


service WorkerService {
    rpc GetUuid(google.protobuf.Empty) returns (Uuid) {}
    rpc GetSeqNum(google.protobuf.Empty) returns (SeqNum) {}

    rpc Start(Config) returns (google.protobuf.Empty) {}
    rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty) {}

    rpc Dispatch(stream Topic) returns (google.protobuf.Empty) {}

    rpc WaitForEvent(EventTimeout) returns (stream Event) {}
    rpc WaitForTopic(EventTimeout) returns (stream Event) {}

    rpc WaitForStarted(EventTimeout) returns (Event) {}
    rpc WaitForStopped(EventTimeout) returns (Event) {}
    rpc WaitForOnline(EventTimeout) returns (Event) {}
    rpc WaitForOffline(EventTimeout) returns (Event) {}
}
